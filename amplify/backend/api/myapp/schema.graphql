enum CreditStatus {
  NOT_YET_VERIFIED,
  PENDING,
  ACCEPTED,
}

type User
  @model
  @auth(
    rules: [
      { allow: private, operations: [read, update], provider: userPools }
      { allow: owner, ownerField: "id", provider: userPools }
      { allow: public, operations: [create] }
    ]
  )
  @aws_cognito_user_pools {
  id: ID!
  email: String!
  profile: String
  credit: CreditStatus!
  posts: [Post] @hasMany(indexName: "byUser", fields: ["id"])
  chats: [Chat] @hasMany(indexName: "byUser", fields: ["id"])
  chats2: [Chat] @hasMany(indexName: "byUser2", fields: ["id"])
}

type Post
  @model
  @auth(
    rules: [
      { allow: owner, provider: userPools, ownerField: "userID" }
      { allow: private, provider: userPools, operations: [read, update] }
    ]
  )
  @aws_cognito_user_pools {
  id: ID!
  title: String!
  content: String!
  likes: Int!
  image: String
  user: User! @belongsTo(fields: ["userID"])
  userID: ID! @index(name: "byUser")
  comments: [Comment] @hasMany(indexName: "byPost", fields: ["id"])
  likeStatuses: [LikeStatus] @hasMany(indexName: "byPost", fields: ["id"])
}

type Comment
  @model
  @auth(
    rules: [
      { allow: owner, provider: userPools, ownerField: "userID" }
      { allow: private, provider: userPools, operations: [read, update] }
    ]
  )
  @aws_cognito_user_pools {
  id: ID!
  content: String!
  post: Post! @belongsTo(fields: ["postID"])
  postID: ID! @index(name: "byPost")
  userID: String!
}

type LikeStatus
  @model
  @auth(
    rules: [
      { allow: owner, provider: userPools, ownerField: "username" }
      { allow: private, provider: userPools, operations: [read, delete] }
    ]
  )
  @aws_cognito_user_pools { # Include this directive to enable Cognito User Pools
  id: ID!
  status: Boolean!
  post: Post! @belongsTo(fields: ["postID"])
  postID: ID! @index(name: "byPost")
  userID: String!
}

type Chat
  @model
  @auth(
    rules: [
      {allow: owner , provider: userPools, ownerField: "userID"}
      {allow: owner , provider: userPools, ownerField: "userID2"}
    ]
  )
@aws_cognito_user_pools
{
  id: ID!
  message: [Message] @hasMany(indexName: "byChat", fields: ["id"])
  user: User! @belongsTo(fields: ["userID"])
  userID: ID! @index(name: "byUser")
  user2: User! @belongsTo(fields: ["userID2"])
  userID2: ID! @index(name: "byUser2")
}

type Message
  @model
  @auth(
    rules: [
      {allow: owner , provider: userPools, ownerField: "userID"}
      {allow: private, provider: userPools, operations: [read,delete]}
    ]
  )
@aws_cognito_user_pools
{
  id: ID!
  content: String!
  userID: String!
  chat: Chat! @belongsTo(fields: ["chatID"])
  chatID: ID! @index(name: "byChat")
  image: String
}


